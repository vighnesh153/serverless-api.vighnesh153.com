org: vighnesh153
app: serverless-api-vighnesh153-com
service: serverless-api-vighnesh153-com

frameworkVersion: '2'

custom:
  customDomain:
    domainName: '${param:DOMAIN}'
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  profile:
    dev: vighnesh153
    prod: vighnesh153
  prune:
    automatic: true
    number: 3
  s3Sync:
    - bucketName: ${self:custom.publicAssetsBucketName}
      localDir: 'src/public'
  logRetentionInDays: 14
  sessionHashKey: 'identifier'
  stage: '${self:provider.stage}'
  usersTableName: 'users-table-${self:provider.stage}'
  sessionsTableName: 'sessions-table-${self:provider.stage}'
  backendBucketName: 'backend-bucket.api.vighnesh153.com-${self:provider.stage}'
  publicAssetsBucketName: 'public-assets-bucket.api.vighnesh153.com-${self:provider.stage}'

plugins:
  - serverless-domain-manager
  - serverless-plugin-log-retention
  - serverless-prune-plugin
  - serverless-s3-sync

package:
  individually: true
  patterns:
    - 'src'
    - 'handler.js'
    - '!src/public'
    - '!node_modules'
    - '!local-server.js'
    - '!package-lock.json'
    - '!README.md'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: '20201221'
  stage: dev
  profile: ${self:custom.profile.${self:custom.stage}}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:CreateTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
            - Fn::GetAtt: [ SessionsTable, Arn ]
  environment:
    USERS_TABLE: '${self:custom.usersTableName}'
    SESSIONS_TABLE: '${self:custom.sessionsTableName}'
    SESSION_HASH_KEY: '${self:custom.sessionHashKey}'
    PUBLIC_ASSETS_BUCKET_NAME: '${self:custom.publicAssetsBucketName}'
    BACKEND_BUCKET_NAME: '${self:custom.backendBucketName}'
    COOKIE_SECRET: '${param:COOKIE_SECRET}'
    DOMAIN: '${param:DOMAIN}'
    STAGE: '${param:STAGE}'
    GOOGLE_ADMIN_EMAILS: 'vighnesh.raut13@gmail.com,me@vighnesh153.com'
    GOOGLE_CLIENT_ID: '${param:GOOGLE_CLIENT_ID}'
    GOOGLE_CLIENT_SECRET: '${param:GOOGLE_CLIENT_SECRET}'

layers:
  NodeModules:
    path: layer
    compatibleRuntimes:
      - nodejs14.x
    retain: false

functions:
  api:
    handler: handler.handler
    memorySize: 512
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: /
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
            allowCredentials: true
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
            allowCredentials: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: userFullName
            AttributeType: S
          - AttributeName: userImageUrl
            AttributeType: S
          - AttributeName: userRoles
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    SessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.sessionsTableName}
        AttributeDefinitions:
          - AttributeName: ${self:custom.sessionHashKey}
            AttributeType: S
        KeySchema:
          - AttributeName: ${self:custom.sessionHashKey}
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    PublicAssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.publicAssetsBucketName}

    BucketAllowPublicReadPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref PublicAssetsBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "s3:GetObject"
              Resource:
                - !Join ['/', [!GetAtt [PublicAssetsBucket, Arn], '*']]
              Principal: "*"

    BackendBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.backendBucketName}
