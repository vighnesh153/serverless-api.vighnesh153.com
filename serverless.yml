org: vighnesh153
app: serverless-api-vighnesh153-com
service: serverless-api-vighnesh153-com

frameworkVersion: '2'

custom:
  customDomain:
    domainName: '${param:DOMAIN}'
    basePath: ''
    stage: ${self:custom.stage}
    createRoute53Record: true
  profile:
    dev: vighnesh153
    prod: vighnesh153
  prune:
    automatic: true
    number: 3
  s3Sync:
    - bucketName: ${self:custom.publicAssetsBucketName}
      localDir: 'src/public'
  hostedZoneId: '${param:HOSTED_ZONE_ID}'   # Hosted zone ID of aws.vighnesh153.com
  logRetentionInDays: 14
  sessionHashKey: 'identifier'
  stage: '${opt:stage, self:provider.stage}'
  usersTableName: 'users-table-${self:custom.stage}'
  sessionsTableName: 'sessions-table-${self:custom.stage}'
  backendBucketName: 'backend-bucket.api.vighnesh153.com-${self:custom.stage}'
  publicAssetsBucketName: 'public-assets-bucket.api.vighnesh153.com-${self:custom.stage}'
  publicAssetsCloudfrontAlias: 'public-assets-${self:custom.stage}.aws.vighnesh153.com'

plugins:
  - serverless-domain-manager
  - serverless-plugin-log-retention
  - serverless-prune-plugin
  - serverless-s3-sync

package:
  individually: true
  patterns:
    - 'src'
    - 'handler.js'
    - '!src/public'
    - '!node_modules'
    - '!local-server.js'
    - '!package-lock.json'
    - '!README.md'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: '20201221'
  stage: dev
  profile: ${self:custom.profile.${self:custom.stage}}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:CreateTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
            - Fn::GetAtt: [ SessionsTable, Arn ]
  environment:
    USERS_TABLE: '${self:custom.usersTableName}'
    SESSIONS_TABLE: '${self:custom.sessionsTableName}'
    SESSION_HASH_KEY: '${self:custom.sessionHashKey}'
    PUBLIC_ASSETS_BUCKET_NAME: '${self:custom.publicAssetsBucketName}'
    PUBLIC_ASSETS_CLOUDFRONT_ALIAS: '${self:custom.publicAssetsCloudfrontAlias}'
    BACKEND_BUCKET_NAME: '${self:custom.backendBucketName}'
    COOKIE_SECRET: '${param:COOKIE_SECRET}'
    DOMAIN: '${param:DOMAIN}'
    STAGE: '${param:STAGE}'
    GOOGLE_ADMIN_EMAILS: 'vighnesh.raut13@gmail.com,me@vighnesh153.com'
    GOOGLE_CLIENT_ID: '${param:GOOGLE_CLIENT_ID}'
    GOOGLE_CLIENT_SECRET: '${param:GOOGLE_CLIENT_SECRET}'

layers:
  NodeModules:
    path: layer
    compatibleRuntimes:
      - nodejs14.x
    retain: false

functions:
  api:
    handler: handler.handler
    memorySize: 512
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: /
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
            allowCredentials: true
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
            allowCredentials: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    SessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.sessionsTableName}
        AttributeDefinitions:
          - AttributeName: ${self:custom.sessionHashKey}
            AttributeType: S
        KeySchema:
          - AttributeName: ${self:custom.sessionHashKey}
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    PublicAssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.publicAssetsBucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: [ '*' ]
              AllowedMethods: [ GET, PUT ]
              AllowedOrigins: [ '*' ]
              MaxAge: '3600'
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    PublicAssetsCloudfrontCert:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${self:custom.publicAssetsCloudfrontAlias}
        DomainValidationOptions:
          - DomainName: ${self:custom.publicAssetsCloudfrontAlias}
            HostedZoneId: ${self:custom.hostedZoneId}
        ValidationMethod: DNS

    PublicAssetsOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'access-identity-${self:custom.publicAssetsBucketName}.s3.amazonaws.com'

    PublicAssetsCloudfrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.publicAssetsCloudfrontAlias}
          Comment: 'Public Assets: ${self:custom.stage}'
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6'  # Reference (managed policy -> Managed-CachingOptimized): https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
            Compress: true
            ViewerProtocolPolicy: 'redirect-to-https'
            TargetOriginId: 'S3-${self:custom.publicAssetsBucketName}'
          Enabled: true
          Origins:
            - ConnectionAttempts: 3
              ConnectionTimeout: 10
              DomainName: '${self:custom.publicAssetsBucketName}.s3.amazonaws.com'
              Id: 'S3-${self:custom.publicAssetsBucketName}'
              S3OriginConfig:
                OriginAccessIdentity: !Join [ "", [ "origin-access-identity/cloudfront/", !Ref PublicAssetsOriginAccessIdentity ] ]
          PriceClass: PriceClass_All
          ViewerCertificate:
            AcmCertificateArn: !Ref PublicAssetsCloudfrontCert
            MinimumProtocolVersion: TLSv1.2_2019
            SslSupportMethod: sni-only


    PublicAssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref PublicAssetsBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "s3:GetObject"
              Resource:
                - !Join ['/', [!GetAtt [PublicAssetsBucket, Arn], '*']]
              Principal:
                CanonicalUser:
                  Fn::GetAtt: [ PublicAssetsOriginAccessIdentity , S3CanonicalUserId ]

    BackendBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.backendBucketName}
